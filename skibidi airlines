local library = loadstring(game:HttpGet('https://raw.githubusercontent.com/obeseinsect/roblox/main/Ui%20Libraries/Elerium.lua'))()
-- Lock
local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

function SendNotification(text)
    Notification:Notify(
        {Title = "Infinity.hook", Description = "by Vac (@movedirection) - "..text},
        {OutlineColor = Color3.fromRGB(0,0,180),Time = 3, Type = "image"},
        {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(0,0,180)}
    )
end

local Resolver = false

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

RunService.Heartbeat:Connect(function()
    if Resolver then
        local Plr = getClosestPlayerToCursor()
        if Plr and Plr.Character then
            local Humanoid = Plr.Character:FindFirstChildOfClass("Humanoid")
            local RootPart = Plr.Character:FindFirstChild("HumanoidRootPart") -- Targeting HumanoidRootPart
            if Humanoid and RootPart then
                local MoveDir = Humanoid.MoveDirection * Humanoid.WalkSpeed
                if RootPart.Velocity ~= MoveDir then
                    RootPart.Velocity = MoveDir
                    RootPart.AssemblyLinearVelocity = MoveDir
                end
            end
        end
    end
end)

local AutoAir = false -- Toggle AutoAir ON/OFF
local AirDelay = 0.01 -- Delay before activating the tool

RunService.RenderStepped:Connect(function()
    if AutoAir then
        local Plr = getClosestPlayerToCursor() -- Get the closest player
        
        if Plr and Plr.Character then
            local humanoid = Plr.Character:FindFirstChild("Humanoid")
            local RootPart = Plr.Character:FindFirstChild("HumanoidRootPart")

            if humanoid and RootPart and humanoid.Health > 5 and RootPart.Velocity.Y > 15 then
                -- Temporarily disable AutoAir to prevent multiple activations
                AutoAir = false 

                task.wait(AirDelay) -- Delay before activating

                local Tool = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
                if Tool then
                    Tool:Activate() -- Activate the tool
                end
                
                -- Re-enable AutoAir after the delay
                AutoAir = true 
            end
        end
    end
end)

local hitsounds = {
    {name = "hentai.wav", url = "https://github.com/tickcount/hitsounds/raw/master/hentai2.mp3"},    
    {name = "amongus.wav", url = "https://github.com/tickcount/hitsounds/raw/master/amongus_kill.wav"},
    {name = "bell.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/bell.wav?raw=true"},
    {name = "bepis.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/bepis.wav?raw=true"},
    {name = "bubble.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/bubble.wav?raw=true"},
    {name = "cock.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/cock.wav?raw=true"},
    {name = "cod.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/cod.wav?raw=true"},
    {name = "fatality.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/fatality.wav?raw=true"},
    {name = "phonk.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/phonk.wav?raw=true"},
    {name = "sparkle.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/sparkle.wav?raw=true"}
}

if not isfolder("hitsounds") then
    makefolder("hitsounds")
end

for _, sound in pairs(hitsounds) do
    local path = "hitsounds" .. "/" .. sound.name
    if not isfile(path) then
        writefile(path, game:HttpGet(sound.url))
    end
end

getgenv().Settings = {
    FrostByte = {
        Enabled = false,
        DOT = true,
        AIRSHOT = false,
        NOTIF = true,
        AUTOPRED = false,
        AdvancedAutoPred = false,
        FOV = math.huge,
        RESOLVER = false,
        LOCKTYPE = "Namecall",
        
        Resolver = {
              Enabled = true,
              Type = "None",
        },
       Camera = {
        Enabled = false,
        HoodCustomsBypass = false,
     },
        OnHit = {
             Enabled = true,
             Hitchams = {
                  Enabled = false,
                  Color = Color3.fromRGB(0,0,180),
                  Transparency = 0,
                  Material = "ForceField",
             },
            Hitsound = {
                  Enabled = false,
                  Sound = "hitsounds/sparkle.wav",
                  Volume = 2,
            },
        }
    }
}

getgenv().DistancesMid = 50
getgenv().DistancesClose = 10

getgenv().CAMPREDICTION = 7
getgenv().CAMJUMPPREDICTION = 10
getgenv().HorizontalSmoothness = 1
getgenv().Shake = 0

getgenv().PREDICTION = 0.14
getgenv().JUMPPREDICTION = 0.09

getgenv().SelectedPart = "HumanoidRootPart" --// LowerTorso, UpperTorso, Head
getgenv().Prediction = "Normal"

--// Change Prediction,  AutoPrediction Must Be Off
    local lplr = game.Players.LocalPlayer
    local AnchorCount = 0
    local MaxAnchor = 50
 
    local CC = game:GetService"Workspace".CurrentCamera
    local Plr;
    local enabled = false
    
    local mouse = game.Players.LocalPlayer:GetMouse()
    local placemarker = Instance.new("Part", game.Workspace)
 
    function makemarker(Parent, Adornee, Color, Size, Size2)
        local e = Instance.new("BillboardGui", Parent)
        e.Name = "PP"
        e.Adornee = Adornee
        e.Size = UDim2.new(Size, Size2, Size, Size2)
        e.AlwaysOnTop = getgenv().Settings.FrostByte.DOT
        local a = Instance.new("Frame", e)
        if getgenv().Settings.FrostByte.DOT == true then
        a.Size = UDim2.new(1, 1, 1, 1)
        else
        a.Size = UDim2.new(0, 0, 0, 0)
        end
        if getgenv().Settings.FrostByte.DOT == true then
        a.Transparency = 0
        a.BackgroundTransparency = 0
        else
        a.Transparency = 1
        a.BackgroundTransparency = 1
        end
        a.BackgroundColor3 = Color
        local g = Instance.new("UICorner", a)
        if getgenv().Settings.FrostByte.DOT == false then
        g.CornerRadius = UDim.new(1, 1)
        else
        g.CornerRadius = UDim.new(1, 1) 
        end
        return(e)
    end
 
 
    local data = game.Players:GetPlayers()
    function noob(player)
        local character
        repeat wait() until player.Character
        local handler = makemarker(guimain, player.Character:WaitForChild(SelectedPart), Color3.fromRGB(107, 184, 255), 0.3, 3)
        handler.Name = player.Name
        player.CharacterAdded:connect(function(Char) handler.Adornee = Char:WaitForChild(SelectedPart) end)
 
 
        spawn(function()
            while wait() do
                if player.Character then
                end
            end
        end)
    end
 
    for i = 1, #data do
        if data[i] ~= game.Players.LocalPlayer then
            noob(data[i])
        end
    end
 
    game.Players.PlayerAdded:connect(function(Player)
        noob(Player)
    end)
 
    spawn(function()
        placemarker.Anchored = true
        placemarker.CanCollide = false
        if getgenv().Settings.FrostByte.DOT == true then
        placemarker.Size = Vector3.new(0, 0, 0)
        else
        placemarker.Size = Vector3.new(0, 0, 0)
        end
        placemarker.Transparency = 0.75
        if getgenv().Settings.FrostByte.DOT then
        makemarker(placemarker, placemarker, Color3.fromRGB(0,0,180), 1, 0)
        end
    end)

local gui = Instance.new("ScreenGui")
gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui") -- Use PlayerGui instead of CoreGui
gui.ResetOnSpawn = false

local function createButton(name, text, position, size, textsize)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Text = text
    button.TextSize = textsize
    button.TextColor3 = Color3.new(1, 1, 1)
    button.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
    button.BorderColor3 = Color3.new(255, 0, 0)
    button.BorderSizePixel = 4
    button.BackgroundTransparency = 1
    button.Font = Enum.Font.Arcade
    button.Size = size
    button.Position = position
    button.Parent = gui  -- Attach it to gui
    button.Draggable = true

    local cornerUI = Instance.new("UICorner")
    cornerUI.CornerRadius = UDim.new(0, 5)
    cornerUI.Parent = button

    local textStroke = Instance.new("UIStroke")
    textStroke.Color = Color3.new(0, 0, 0)
    textStroke.Thickness = 1
    textStroke.Parent = button

    return button
end

-- Toggle functionality
local enabled = false
local button = createButton("button", "Infinity", UDim2.new(0.7, 0, 0, 0), UDim2.new(0.3, 0, 0.3, 0), 35)
local Plr, ClosestPart = nil, nil

function hitsound()
    local Hit = Instance.new("Sound")
    Hit.Parent = game.SoundService
    Hit.SoundId = getcustomasset(getgenv().Settings.FrostByte.OnHit.Hitsound.Sound)
    Hit.Volume = getgenv().Settings.FrostByte.OnHit.Hitsound.Volume
    Hit.Looped = false
    Hit:Play()
    Hit.Ended:Connect(function()                                         Hit:Destroy()
        end)
end
-- enabled = false
button.MouseButton1Click:Connect(function()
if getgenv().Settings.FrostByte.Enabled or getgenv().Settings.FrostByte.Camera.Enabled then
            if enabled == true then
                enabled = false
                    Plr = getClosestPlayerToCursor()
button.TextColor3 = Color3.new(1,1,1)
                if getgenv().Settings.FrostByte.NOTIF == true then 
 SendNotification("Unlocked")
            end
            else
                Plr = getClosestPlayerToCursor()
                TargetPlayer = tostring(Plr)
                enabled = true
local oldHealt = game.Players[TargetPlayer].Character.Humanoid.Health
                        if getgenv().Settings.FrostByte.OnHit.Hitsound.Enabled and Plr ~= nil then

                             game.Players[TargetPlayer].Character.Humanoid.HealthChanged:Connect(function(neHealth)                            
if neHealth < oldHealt then
hitsound()
elseif neHealth > oldHealt then
print("nil")
elseif game.Players[TargetPlayer].Character.Humanoid.Health < 0 then
print("nil")
end
oldHealt = neHealth
end)
end                                      
              
if getgenv().Settings.FrostByte.OnHit.Hitchams.Enabled then
   
        if Plr ~= nil then  game.Players[TargetPlayer].Character.Humanoid.HealthChanged:Connect(function(neHealth)
        local Clone = game.Players[TargetPlayer].Character:Clone()
        if neHealth > oldHealt then
            Clone:Destroy()
        end
        if game.Players[TargetPlayer].Character.Humanoid.Health < 0 then
            Clone:Destroy()
        end
        if neHealth < oldHealt then
            -- Main Hit-Chams --
            game.Players[TargetPlayer].Character.Archivable = true
            for _, Obj in next, Clone:GetDescendants() do
                if Obj.Name == "HumanoidRootPart" or Obj:IsA("Humanoid") or Obj:IsA("LocalScript") or Obj:IsA("Script") or Obj:IsA("Decal") then
                    Obj:Destroy()
                elseif Obj:IsA("BasePart") or Obj:IsA("Meshpart") or Obj:IsA("Part") then
                    if Obj.Transparency == 1 then
                        Obj:Destroy()
                    else
                        Obj.CanCollide = false
                        Obj.Anchored = true
                        Obj.Material = getgenv().Settings.FrostByte.OnHit.Hitchams.Material
                        Obj.Color = getgenv().Settings.FrostByte.OnHit.Hitchams.Color
                        Obj.Transparency = getgenv().Settings.FrostByte.OnHit.Hitchams.Transparency
                        Obj.Size = Obj.Size + Vector3.new(0.05, 0.05, 0.05)
                    end
                end
           
            end
            Clone.Parent = game.Workspace
            local start = tick()
            local connection
            connection = game:GetService("RunService").Heartbeat:Connect(function()
                if tick() - start >= 3 then
                    connection:Disconnect()
                    Clone:Destroy()
                end
            end)
        end

            oldHealt = neHealth

    end)
    end
end
button.TextColor3 = Color3.new(0,0,180)
                if getgenv().Settings.FrostByte.NOTIF == true then
SendNotification("Target: "..Plr.Character.Humanoid.DisplayName)
                end
            end
   else
  SendNotification("enable the lock retard")
        end
    end)
 
 local button2 = createButton("button", "Resolver", UDim2.new(0.7, 0, 0, 0), UDim2.new(0.2, 0, 0.2, 0), 23.333)

button2.MouseButton1Click:Connect(function()

    Resolver = not Resolver
    button2.TextColor3 = Resolver and Color3.new(0, 0, 180) or Color3.new(1, 1, 1)
end)

 local button3 = createButton("button", "AutoAir", UDim2.new(0.7, 0, 0, 0), UDim2.new(0.2, 0, 0.2, 0), 23.333)

button3.MouseButton1Click:Connect(function()

    AutoAir = not AutoAir
    button3.TextColor3 = AutoAir and Color3.new(0, 0, 180) or Color3.new(1, 1, 1)
end)

 
     --[[
    function getClosestPlayerToCursor()
        local closestPlayer
        local shortestDistance = getgenv().Settings.FearLas.FOV
 
        for i, v in pairs(game.Players:GetPlayers()) do
            if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
                local pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position)
                local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude
                if magnitude < shortestDistance then
                    closestPlayer = v
                    shortestDistance = magnitude
                end
            end
        end
        return closestPlayer
    end
 ]]

function getClosestPlayerToCursor()
    local closestPlayer
    local shortestDistance = getgenv().Settings.FrostByte.FOV
    local screenCenter = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)

    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
            if onScreen then
                local magnitude = (Vector2.new(pos.X, pos.Y) - screenCenter).Magnitude
                if magnitude < shortestDistance then
                    closestPlayer = v
                    shortestDistance = magnitude
                end
            end
        end
    end
    return closestPlayer
end
 
    local pingvalue = nil;
    local split = nil;
    local ping = nil;

local LocalHL = Instance.new("Highlight") 
    game:GetService"RunService".Stepped:connect(function()
        if enabled and getgenv(). Settings.FrostByte.Enabled and Plr.Character ~= nil and Plr.Character:FindFirstChild("HumanoidRootPart") or enabled and getgenv(). Settings.FrostByte.Camera.Enabled and Plr.Character ~= nil and Plr.Character:FindFirstChild("HumanoidRootPart") then
if getgenv().Prediction == "Normal" then
            placemarker.CFrame = CFrame.new(Plr.Character.HumanoidRootPart.Position+Vector3.new(Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.X*getgenv().PREDICTION,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Y*getgenv().JUMPPREDICTION,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Z*getgenv().PREDICTION))         
elseif getgenv().Prediction == "Yun" then
            placemarker.CFrame = CFrame.new(Plr.Character.HumanoidRootPart.Position+Vector3.new(Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.X*getgenv().PREDICTION/10,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Y*getgenv().JUMPPREDICTION/10,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Z*getgenv().PREDICTION/10))
end
LocalHL.Parent = Plr.Character
LocalHL.FillTransparency = 0.2
LocalHL.FillColor = Color3.fromRGB(0,0,180)
LocalHL.OutlineColor = Color3.fromRGB(255,255,255)
        else
            placemarker.CFrame = CFrame.new(0, 9999, 0)
          LocalHL.Parent = nil
        end
if getgenv().Settings.FrostByte.AdvancedAutoPred == true and enabled then
local Piing = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()
                Split = string.split(Piing,'(')
                Pig = tonumber(Split[1])
if Pig < 270 then
getgenv().CAMPREDICTION = 4
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 200 then 
getgenv().CAMPREDICTION = 4.4
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 190 then 
getgenv().CAMPREDICTION = 4.8
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 180 then
getgenv().CAMPREDICTION = 4.19
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 170 then 
getgenv().CAMPREDICTION = 5.085
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 160 then 
getgenv().CAMPREDICTION = 5.133
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 150 then
getgenv().CAMPREDICTION = 5.867
getgenv().CAMJUMPPREDICTION = 10
elseif 140 then
getgenv().CAMPREDICTION = 5.913
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 130 then
getgenv().CAMPREDICTION = 6.21
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 120 then
getgenv().CAMPREDICTION = 6.377
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 110 then
getgenv().CAMPREDICTION = 6.62
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 100 then
getgenv().CAMPREDICTION = 6.122
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 90 then
getgenv().CAMPREDICTION = 6.52
getgenv().CAMJUMPPREDICTION = 10
elseif 80 then
getgenv().CAMPREDICTION = 6.86
getgenv().CAMJUMPPREDICTION = 10
elseif Pig < 70 then
getgenv().CAMPREDICTION = 7.344
getgenv().CAMJUMPPREDICTION = 10
end
end
if getgenv().Settings.FrostByte.AUTOPRED == true and enabled then
pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
             split = string.split(pingvalue,'(')
             ping = tonumber(split[1])
if getgenv().Prediction == "Normal" then
if ping <200 then
        getgenv().PREDICTION = 0.198343243234332
getgenv().JUMPPREDICTION = tostring(ping/1500)
    elseif ping < 170 then
        getgenv().PREDICTION = 0.165713
getgenv().JUMPPREDICTION = tostring(ping/1500)
    elseif ping < 160 then
        getgenv().PREDICTION = 0.16242
getgenv().JUMPPREDICTION = tostring(ping/1500)
    elseif ping < 150 then
        getgenv().PREDICTION = 0.158041
getgenv().JUMPPREDICTION = tostring(ping/1500)
    elseif ping < 140 then
        getgenv().PREDICTION = 0.155313
getgenv().JUMPPREDICTION = tostring(ping/1500)
    elseif ping < 130 then
        getgenv().PREDICTION = 0.152692
getgenv().JUMPPREDICTION = tostring(ping/1500)
    elseif ping < 120 then
        getgenv().PREDICTION = 0.15017
getgenv().JUMPPREDICTION = tostring(ping/1500)
    elseif ping < 110 then
        getgenv().PREDICTION = 0.1465
getgenv().JUMPPREDICTION = tostring(ping/1500)
    elseif ping < 100 then
  getgenv().PREDICTION = 0.143987
getgenv().JUMPPREDICTION = tostring(ping/1500)
 elseif ping < 80 then
  getgenv().PREDICTION = 0.141340
getgenv().JUMPPREDICTION = tostring(ping/1500)
 elseif ping < 70 then
  getgenv().PREDICTION = 0.13633
getgenv().JUMPPREDICTION = tostring(ping/1500)
 elseif ping < 65 then
  getgenv().PREDICTION = 0.1274236
getgenv().JUMPPREDICTION = tostring(ping/1500)
 elseif ping < 50 then
  getgenv().PREDICTION = 0.13644
getgenv().JUMPPREDICTION = tostring(ping/1500)
 elseif ping < 30 then
  getgenv().PREDICTION = 0.12452476
getgenv().JUMPPREDICTION = tostring(ping/1500)
end
elseif getgenv().Prediction == "Yun" then
if ping <200 then

        getgenv().PREDICTION = 1.98343243234332
getgenv().JUMPPREDICTION = tostring(ping/150)
    elseif ping < 170 then
        getgenv().PREDICTION = 1.65713
getgenv().JUMPPREDICTION = tostring(ping/150)
    elseif ping < 160 then
        getgenv().PREDICTION = 1.6242
getgenv().JUMPPREDICTION = tostring(ping/150)
    elseif ping < 150 then
        getgenv().PREDICTION = 1.58041
getgenv().JUMPPREDICTION = tostring(ping/150)
    elseif ping < 140 then
        getgenv().PREDICTION = 1.55313
getgenv().JUMPPREDICTION = tostring(ping/150)
    elseif ping < 130 then
        getgenv().PREDICTION = 1.52692
getgenv().JUMPPREDICTION = tostring(ping/150)
    elseif ping < 120 then
        getgenv().PREDICTION = 1.5017
getgenv().JUMPPREDICTION = tostring(ping/150)
    elseif ping < 110 then
        getgenv().PREDICTION = 1.465
getgenv().JUMPPREDICTION = tostring(ping/150)
    elseif ping < 100 then
  getgenv().PREDICTION = 1.43987
getgenv().JUMPPREDICTION = tostring(ping/150)
 elseif ping < 80 then
  getgenv().PREDICTION = 1.41340
getgenv().JUMPPREDICTION = tostring(ping/150)
 elseif ping < 70 then
  getgenv().PREDICTION = 1.3633
getgenv().JUMPPREDICTION = tostring(ping/150)
 elseif ping < 65 then
  getgenv().PREDICTION = 1.274236
getgenv().JUMPPREDICTION = tostring(ping/150)
 elseif ping < 50 then
  getgenv().PREDICTION = 1.3644
getgenv().JUMPPREDICTION = tostring(ping/150)
 elseif ping < 30 then
  getgenv().PREDICTION = 1.2452476
getgenv().JUMPPREDICTION = tostring(ping/150)
 end
else
print("nil")
end
end

if getgenv().Settings.FrostByte.Resolver.Enabled then
if getgenv().Settings.FrostByte.Resolver.Type == "Delta Time" then
print("wsg")
end
if getgenv().Settings.FrostByte.Resolver.Type == "Recalculator" then
print("wsg")
end
if getgenv().Settings.FrostByte.Resolver.Type == "No Y Velocity" then
print("wsg")
end
end
    end)
 
game:GetService"RunService".Stepped:connect(function()
    if enabled and getgenv().Settings.FrostByte.Camera.Enabled then
        if Plr ~= nil then
            local shakeOffset = Vector3.new(
                math.random(-getgenv().Shake, getgenv().Shake),
                math.random(-getgenv().Shake, getgenv().Shake),
                math.random(-getgenv().Shake, getgenv().Shake)
            ) * 0.1
local HorizontalLookPosition = CFrame.new(CC.CFrame.p, Plr.Character[getgenv().SelectedPart].Position + (Vector3.new(Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.X/getgenv().CAMPREDICTION,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Y/getgenv().CAMJUMPPREDICTION,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Z/getgenv().CAMPREDICTION))+shakeOffset)
            CC.CFrame = CC.CFrame:Lerp(HorizontalLookPosition, getgenv().HorizontalSmoothness)
    end
end
end)

    local mt = getrawmetatable(game)
    local old = mt.__namecall
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(...)
        local args = {...}
        local vap = {"UpdateMousePos", "GetMousePos", "MousePos", "MOUSE", "MousePosUpdate"}
        if enabled and getnamecallmethod() == "FireServer" and table.find(vap, args[2]) and getgenv().Settings.FrostByte.Enabled and Plr.Character ~= nil and getgenv().Settings.FrostByte.LOCKTYPE == "Namecall" then
            -- args[3] = Plr.Character.HumanoidRootPart.Position+(Plr.Character.HumanoidRootPart.Velocity*accomidationfactor)
            --[[
            if getgenv().Settings.FrostByte.AIRSHOT == true then
                if game.Workspace.Players[Plr.Name].Humanoid:GetState() == Enum.HumanoidStateType.Freefall then -- Plr.Character:WaitForChild("Humanoid"):GetState() == Enum.HumanoidStateType.Freefall
 
                    --// Airshot
                    args[3] = Plr.Character.LeftFoot.Position+(Plr.Character.LeftFoot.Velocity*PredictionValue)
 
                else
                    args[3] = Plr.Character.HumanoidRootPart.Position+(Plr.Character.HumanoidRootPart.Velocity*getgenv().PREDICTION)
 
                end
            else
                    args[3] = Plr.Character.HumanoidRootPart.Position+(Plr.Character.HumanoidRootPart.Velocity*getgenv().PREDICTION)
            end
            ]]
            if getgenv().Prediction == "Normal" then
            args[3] = Plr.Character[getgenv().SelectedPart].Position+Vector3.new(Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.X*getgenv().PREDICTION,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Y*getgenv().JUMPPREDICTION,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Z*getgenv().PREDICTION)
            elseif getgenv().Prediction == "Yun" then
            args[3] = Plr.Character[getgenv().SelectedPart].Position+Vector3.new(Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.X*getgenv().PREDICTION/10,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Y*getgenv().JUMPPREDICTION/10,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Z*getgenv().PREDICTION/10)
            else
 
            args[3] = Plr.Character[SelectedPart].Position
 
            end
 
            return old(unpack(args))
        end
        return old(...)
    end)

--[[
    game:GetService("RunService").RenderStepped:Connect(function()
        if getgenv().Settings.FrostByte.RESOVLER == true and Plr.Character ~= nil and enabled and getgenv().Settings.FrostByte.Enabled then
        if getgenv().Settings.FrostByte.AIRSHOT == true and enabled and Plr.Character ~= nil then
 
            if game.Workspace.Players[Plr.Name].Humanoid:GetState() == Enum.HumanoidStateType.Freefall then -- Plr.Character:WaitForChild("Humanoid"):GetState() == Enum.HumanoidStateType.Freefall
 
                --// Airshot
 
                --// Anchor Check
 
                if Plr.Character ~= nil and Plr.Character.HumanoidRootPart.Anchored == true then
                    AnchorCount = AnchorCount + 1
                    if AnchorCount >= MaxAnchor then
                        Prediction = false
                        wait(2)
                        AnchorCount = 0;
                    end
                else
                    Prediction = true
                    AnchorCount = 0;
                end
 
                SelectedPart = "LeftFoot"
 
            else
                --// Anchor Check
 
                if Plr.Character ~= nil and Plr.Character.HumanoidRootPart.Anchored == true then
                    AnchorCount = AnchorCount + 1
                    if AnchorCount >= MaxAnchor then
                        Prediction = false
                        wait(2)
                        AnchorCount = 0;
                    end
                else
                    Prediction = true
                    AnchorCount = 0;
                end
 
                SelectedPart = "HumanoidRootPart"
 
            end
            else
 
                --// Anchor Check
 
                if Plr.Character ~= nil and Plr.Character.HumanoidRootPart.Anchored == true then
                    AnchorCount = AnchorCount + 1
                    if AnchorCount >= MaxAnchor then
                        Prediction = false
                        wait(2)
                        AnchorCount = 0;
                    end
                else
                    Prediction = true
                    AnchorCount = 0;
                end
 
                SelectedPart = "HumanoidRootPart"
            end
 
        else
                SelectedPart = "HumanoidRootPart"
        end
    end)
]]

local Hooks = {}
local Client = game.Players.LocalPlayer

Hooks[1] = hookmetamethod(Client:GetMouse(), "__index", newcclosure(function(self, index)
    if index == "Hit" and getgenv().Settings.FrostByte.LOCKTYPE == "Index" and enabled and Plr.Character ~= nil and getgenv().Settings.FrostByte.Enabled then
            local position = CFrame.new(Plr.Character[SelectedPart].Position+Vector3.new(Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.X*getgenv().PREDICTION,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Y*getgenv().JUMPPREDICTION,Plr.Character.HumanoidRootPart.AssemblyLinearVelocity.Z*getgenv().PREDICTION))
            return position
        
    end
    return Hooks[1](self, index)
end))

getgenv().CFrameDesync = {
           Enabled = false,
           AnglesEnabled = false,
           Type = "Random",
           Visualize = false,
           VisualizeColor = Color3.fromRGB(255,255,255),
           Random = {
               X = 5,
               Y = 5,
               Z = 5,
               AnglesX = 5,
               AnglesY = 5,
               AnglesZ = 5,
               },
           Custom = {
               X = 5,
               Y = 5,
               Z = 5,
               AnglesX = 5,
               AnglesY = 5,
               AnglesZ = 5,
               },
     TargetStrafe = {
               Speed = 10,
               Height = 10,
               Distance = 7,
               },
}

local straight = {
         Visuals = {},
         Desync = {},
         Hooks = {},
         Connections = {}
}



local RunService = game:GetService("RunService")


task.spawn(function()
straight.Visuals["R6Dummy"] = game:GetObjects("rbxassetid://9474737816")[1]; straight.Visuals["R6Dummy"].Head.Face:Destroy(); for i, v in pairs(straight.Visuals["R6Dummy"]:GetChildren()) do v.Transparency = v.Name == "HumanoidRootPart" and 1 or 0.70; v.Material = "Neon"; v.Color = Color3.fromRGB(255, 255, 255); v.CanCollide = false; v.Anchored = false end
end)

local Utility = {}

do --// Utility Functions
    function Utility:Connection(connectionType, connectionCallback)
        local connection = connectionType:Connect(connectionCallback)
        straight.Connections[#straight.Connections + 1] = connection
        return connection
    end
end

Utility:Connection(RunService.PostSimulation, function()
if getgenv().CFrameDesync.AnglesEnabled or getgenv().CFrameDesync.Enabled then
        straight.Desync[1] = lplr.Character.HumanoidRootPart.CFrame
        local cframe = lplr.Character.HumanoidRootPart.CFrame
        if getgenv().CFrameDesync.Enabled then
            if getgenv().CFrameDesync.Type == "Random" then
                cframe = cframe * CFrame.new(math.random(-getgenv().CFrameDesync.Random.X, getgenv().CFrameDesync.Random.X), math.random(-getgenv().CFrameDesync.Random.Y, getgenv().CFrameDesync.Random.Y), math.random(-getgenv().CFrameDesync.Random.Z, getgenv().CFrameDesync.Random.Z))
            elseif getgenv().CFrameDesync.Type == "Custom" then
                cframe = cframe * CFrame.new(getgenv().CFrameDesync.Custom.X, getgenv().CFrameDesync.Custom.Y, getgenv().CFrameDesync.Custom.Z)
            elseif getgenv().CFrameDesync.Type == "Mouse" then
                cframe = CFrame.new(lplr:GetMouse().Hit.Position)
            elseif getgenv().CFrameDesync.Type == "Target Strafe" then
            if enabled and Plr ~= nil then
                local currentTime = tick() 
                cframe = CFrame.new(Plr.Character.HumanoidRootPart.Position) * CFrame.Angles(0, 2 * math.pi * currentTime * getgenv().CFrameDesync.TargetStrafe.Speed % (2 * math.pi), 0) * CFrame.new(0, getgenv().CFrameDesync.TargetStrafe.Height, getgenv().CFrameDesync.TargetStrafe.Distance)
                end
        end

        if getgenv().CFrameDesync.Visualize then
            straight.Visuals["R6Dummy"].Parent = workspace
            straight.Visuals["R6Dummy"].HumanoidRootPart.Velocity = Vector3.new()
            straight.Visuals["R6Dummy"]:SetPrimaryPartCFrame(cframe)
            for i, v in pairs(straight.Visuals["R6Dummy"]:GetChildren()) do v.Transparency = v.Name == "HumanoidRootPart" and 1 or 0.70; v.Material = "Neon"; v.Color = getgenv().CFrameDesync.VisualizeColor; v.CanCollide = false; v.Anchored = false end
        else
            straight.Visuals["R6Dummy"].Parent = nil
        end

        if getgenv().CFrameDesync.AnglesEnabled then
            if getgenv().CFrameDesync.Type == "Random" then
                cframe = cframe * CFrame.Angles(math.rad(math.random(getgenv().CFrameDesync.Random.AnglesX)), math.rad(math.random(getgenv().CFrameDesync.Random.AnglesY)), math.rad(math.random(getgenv().CFrameDesync.Random.AnglesZ)))
            elseif getgenv().CFrameDesync.Type == "Custom" then
                cframe = cframe * CFrame.Angles(math.rad(getgenv().CFrameDesync.Custom.AnglesX), math.rad(getgenv().CFrameDesync.Custom.AnglesY), math.rad(getgenv().CFrameDesync.Custom.AnglesZ))
            end
        end
        lplr.Character.HumanoidRootPart.CFrame = cframe
        RunService.RenderStepped:Wait()
        lplr.Character.HumanoidRootPart.CFrame = straight.Desync[1]
    else
        if straight.Visuals["R6Dummy"].Parent ~= nil then
            straight.Visuals["R6Dummy"].Parent = nil
        end
    end
end
end)

--// Hooks
local MainHookingFunctionsTick = tick()
--
straight.Hooks[1] = hookmetamethod(game, "__index", newcclosure(function(self, key)
    if not checkcaller() then
        if key == "CFrame" and straight.Desync[1] and (getgenv().CFrameDesync.AnglesEnabled or getgenv().CFrameDesync.Enabled) and lplr.Character and lplr.Character:FindFirstChild("HumanoidRootPart") and lplr.Character:FindFirstChild("Humanoid") and lplr.Character:FindFirstChild("Humanoid").Health > 0 then
            if self == lplr.Character.HumanoidRootPart then
                return straight.Desync[1] or CFrame.new()
            elseif self == lplr.Character.Head then
                return straight.Desync[1] and straight.Desync[1] + Vector3.new(0, lplr.Character.HumanoidRootPart.Size / 2 + 0.5, 0) or CFrame.new()
            end
        end
    end
    return straight.Hooks[1](self, key)
end))

if getgenv().Settings.FrostByte.Camera.HoodCustomsBypass == true then
for _, con in next, getconnections(workspace.CurrentCamera.Changed) do
  task.wait(0.000001)
    con:Disable()

end


for _, con in next, getconnections(workspace.CurrentCamera:GetPropertyChangedSignal("CFrame")) do
   task.wait(0.000001)
    con:Disable()

end
end

 for _, key in next, getgc(true) do 

        local function updateKey(instanceType)

            if pcall(function() return rawget(key, instanceType) end) and typeof(rawget(key, instanceType)) == 'table' and (rawget(key, instanceType))[1] == 'kick' then
                key.tvk = {
                    'kick',
                    function() 
                        return game.Workspace:WaitForChild('')
                    end
                }
            end
        end

        updateKey('indexInstance')
        updateKey('namecallInstance')
    end

do -- Example UI
	local Window = library:AddWindow("infinity.hook", {
		main_color = Color3.fromRGB(0,0,180),
		min_size = Vector2.new(500, 600),
		toggle_key = Enum.KeyCode.RightShift,
		can_resize = true,
	})

	local Tab = Window:AddTab("Camlock")
	local Teb = Window:AddTab("Target Lock")
	local Tib = Window:AddTab("Miscs")
	local Tub = Window:AddTab("Debugging")
	local Taab = Window:AddTab("Configuration")

	do -- Elements
		Tab:AddLabel("Configuration")

	local Lenabled = Tab:AddSwitch("Enabled", function(bool)
		getgenv().Settings.FrostByte.Camera.Enabled = bool
		end)
		Lenabled:Set(false)

	Tab:AddTextBox("Horizontal Prediction", function(text)
	getgenv().CAMPREDICTION = text
		end, 
	{
	["clear"] = false, -- Default: true (options are optional)
	})
	
	Tab:AddTextBox("Vertical Prediction", function(text)

		getgenv().CAMJUMPPREDICTION = text

		end, 
	{
	["clear"] = false, -- Default: true (options are optional)
	})

	Tab:AddTextBox("Smoothness Value", function(text)
		getgenv().HorizontalSmoothness = text
		end, 
	{
	["clear"] = false, -- Default: true (options are optional)
	})

	Tab:AddTextBox("Shake Value", function(text)
		getgenv().Shake = text
		end, 
	{
	["clear"] = false, -- Default: true (options are optional)
	})
local thingsetup = Tab:AddSwitch("Auto SetUp", function(bool)
	getgenv().Settings.FrostByte.AdvancedAutoPred = bool
end)
thingsetup:Set(false)

	local Dropdown = Tab:AddDropdown("Aim Bone", function(object)
		getgenv().SelectedPart = object
		end)

Dropdown:Add("HumanoidRootPart")
Dropdown:Add("UpperTorso")
Dropdown:Add("LowerTorso")
Dropdown:Add("Head")

--// Target Lock

	Teb:AddLabel("Configuration")

	local bled = Teb:AddSwitch("Enabled", function(bool)
	getgenv().Settings.FrostByte.Enabled = bool
	end)
bled:Set(false)

		local TypeThing = Teb:AddDropdown("Aim Type", function(object)
			getgenv().Settings.FrostByte.LOCKTYPE = object

		end)

TypeThing:Add("Namecall")
TypeThing:Add("Index")

		local PredTypeThing = Teb:AddDropdown("Aim Type", function(object)

			getgenv().Prediction = object


		end)

PredTypeThing:Add("Normal")
PredTypeThing:Add("Yun")

	Teb:AddTextBox("Horizontal Prediction", function(text)
	getgenv().PREDICTION = text
		end, 
	{
	["clear"] = false, -- Default: true (options are optional)
	})
	
	Teb:AddTextBox("Vertical Prediction", function(text)
     getgenv().JUMPPREDICTION = text
		end, 
	{
	["clear"] = false, -- Default: true (options are optional)
	})

	Teb:AddTextBox("Jump Offset Value", function(text)
			print(text)
		end, 
	{
	["clear"] = false, -- Default: true (options are optional)
	})

		local Swiitch = Teb:AddSwitch("Auto SetUp", function(bool)
			getgenv().Settings.FrostByte.AUTOPRED = bool
		end)
		Swiitch:Set(false)

		local Droopdown = Teb:AddDropdown("Aim Bone", function(object)
		getgenv().SelectedPart = object
		end)

Droopdown:Add("HumanoidRootPart")
Droopdown:Add("UpperTorso")
Droopdown:Add("LowerTorso")
Droopdown:Add("Head")

--// Miscs

local OnHitFolder = Tib:AddFolder("On Hit")
	OnHitFolder:AddLabel("On Hit")

local HitsoundsFolder = OnHitFolder:AddFolder("Hitsounds")

local HitsoundEnabledThing = HitsoundsFolder:AddSwitch("Enabled", function(bool)
		getgenv().Settings.FrostByte.OnHit.Hitsound.Enabled = bool
	end)
HitsoundEnabledThing:Set(false)

local SoundsOptions = HitsoundsFolder:AddDropdown("Sound Effect", function(object)
		getgenv().Settings.FrostByte.OnHit.Hitsound.Sound = object
		end)

SoundsOptions:Add("hitsounds/hentai.wav")
SoundsOptions:Add("hitsounds/amongus.wav")
SoundsOptions:Add("hitsounds/sparkle.wav")
SoundsOptions:Add("hitsounds/bell.wav")
SoundsOptions:Add("hitsounds/bepis.wav")
SoundsOptions:Add("hitsounds/bubble.wav")
SoundsOptions:Add("hitsounds/cock.wav")
SoundsOptions:Add("hitsounds/cod.wav")
SoundsOptions:Add("hitsounds/fatality.wav")
SoundsOptions:Add("hitsounds/phonk.wav")

local HitchamsFolder = OnHitFolder:AddFolder("Hitchams")

local HitchamsEnabledThing = HitchamsFolder:AddSwitch("Enabled", function(bool)
		getgenv().Settings.FrostByte.OnHit.Hitchams.Enabled = bool
end)
HitchamsEnabledThing:Set(false)

local MaterialOptions = HitchamsFolder:AddDropdown("Material", function(object)
		getgenv().Settings.FrostByte.OnHit.Hitchams.Material = object
		end)

MaterialOptions:Add("ForceField")
MaterialOptions:Add("Neon")
MaterialOptions:Add("Glass")
MaterialOptions:Add("Plastic")
MaterialOptions:Add("Brick")

local AntiFolder = Tib:AddFolder("Anti Lock")
		AntiFolder:AddLabel("Anti Locks")

local CSyncFolder = Tib:AddFolder("CFrame Sync")
CSyncFolder:AddLabel("CFrame Sync")
local TheDesyncBegins = CSyncFolder:AddSwitch("Enabled", function(bool)
	getgenv().CFrameDesync.Enabled = bool
end)
TheDesyncBegins:Set(false)

local TVManTitan = CSyncFolder:AddSwitch("Visualize", function(bool)

	getgenv().CFrameDesync.Visualize = bool

end)
TVManTitan:Set(false)

local CFrameSyncOptions = CSyncFolder:AddDropdown("Type", function(object)
getgenv().CFrameDesync.Type = object
end)

CFrameSyncOptions:Add("Random")
CFrameSyncOptions:Add("Custom")
CFrameSyncOptions:Add("Mouse")
CFrameSyncOptions:Add("Target Strafe")

local RandomizedSection = CSyncFolder:AddFolder("Random Configuration")
RandomizedSection:AddTextBox("X", function(text)
getgenv().CFrameDesync.Random.X = text
end, 
{
["clear"] = false, -- Default: true (options are optional)
})
RandomizedSection:AddTextBox("Y", function(text)

getgenv().CFrameDesync.Random.Y = text

end, 
{
["clear"] = false, -- Default: true (options are optional)
})
RandomizedSection:AddTextBox("Z", function(text)
getgenv().CFrameDesync.Random.Z = text
end, 
{
["clear"] = false, -- Default: true (options are optional)
})
local CustomTypeSection = CSyncFolder:AddFolder("Custom Configuration")

CustomTypeSection:AddTextBox("X", function(text)

getgenv().CFrameDesync.Custom.X = text
end, 
{
["clear"] = false, -- Default: true (options are optional)
})
CustomTypeSection:AddTextBox("Y", function(text)

getgenv().CFrameDesync.Custom.Y = text

end, 
{
["clear"] = false, -- Default: true (options are optional)
})
CustomTypeSection:AddTextBox("Z", function(text)
getgenv().CFrameDesync.Custom.Z = text
end, 
{
["clear"] = false, -- Default: true (options are optional)
})
local ActualMiscs = Tib:AddFolder("Others")
ActualMiscs:AddLabel("Miscellaneous")
ActualMiscs:AddButton("CFrame Speed", function()
-- Initial values
getgenv().Speed = false
getgenv().SpeedAmount = 2
-- Create a basic GUI
 local button4 = createButton("button", "Speed", UDim2.new(0.7, 0, 0, 0), UDim2.new(0.2, 0, 0.2, 0), 23.333)


local function onButtonClicked()
    getgenv().Speed = not getgenv().Speed
    button4.TextColor3 = getgenv().Speed and Color3.new(0,0,180) or Color3.new(1,1,1)
end
button4.MouseButton1Click:Connect(onButtonClicked)
-- Your existing code modified for the GUI
game:GetService("RunService").Stepped:Connect(function()
    if getgenv().Speed then
        local lPlr = game:GetService("Players").LocalPlayer
        lPlr.Character.HumanoidRootPart.CFrame = lPlr.Character.HumanoidRootPart.CFrame + lPlr.Character.Humanoid.MoveDirection * getgenv().SpeedAmount
    end
end)
end)

ActualMiscs:AddTextBox("Speed Amount", function(text)
getgenv().SpeedAmount = text
end, 
{
["clear"] = false, -- Default: true (options are optional)
})

-- Add Resolver Toggle in "ActualMiscs" (Right Below "CFrame Speed" Textbox)
local ResolverToggle = ActualMiscs:AddSwitch("Resolver", function(state)
    Resolver = state
end)
ResolverToggle:Set(false)

local AutoAirToggle = ActualMiscs:AddSwitch("Auto Air", function(state)
    AutoAir = state
end)
AutoAirToggle:Set(false)

ActualMiscs:AddTextBox("Air Delay", function(text)
    AirDelay = text
end, 
{
["clear"] = false, -- Default: true (options are optional)
})

local DelaySwitch = ActualMiscs:AddSwitch("No Delay", function(bool)
	getgenv().NoDelay = bool
end)
DelaySwitch:Set(false)
if getgenv().NoDelay == true then
CorePackages.Packages:Destroy()
end
local BypassFolder = Tib:AddFolder("Anti Cheat Bypass")
BypassFolder:AddLabel("Anti Cheats")
local Bypass1 = BypassFolder:AddSwitch("Hood Custom Camlock Bypass", function(bool)
	getgenv().Settings.FrostByte.Camera.HoodCustomsBypass = bool
end)
Bypass1:Set(false)
local Bypass2 = BypassFolder:AddSwitch("DaHood Bypass", function(bool)
	getgenv().DaHoodBypass = bool
end)
Bypass2:Set(false)
local Bypass3 = BypassFolder:AddSwitch("Untitled Hood Bypass", function(bool)
	getgenv().UntitledHoodBypass = bool
end)
Bypass3:Set(false)
if getgenv().UntitledHoodBypass == true then
local _1;
_1 = hookmetamethod(game, "__namecall", function(self, ...)
    if not checkcaller() and getnamecallmethod() == "FireServer" then
        if tostring(self.Name) == ".gg/untitledhood" then
            local args = {...}
            if tostring(args[1]) == "ForceDetect" or tostring(args[1]) == "TeleportDetect" or tostring(args[1]) == "GUI_CHECK" then
                return print("anticheat detected something sussy");
            end
        end
    end
    return _1(self, ...);
end)
end

if getgenv().DaHoodBypass == true then
assert(getrawmetatable)
grm = getrawmetatable(game)
setreadonly(grm, false)
old = grm.__namecall
grm.__namecall = newcclosure(function(self, ...)
    local args = {...}
    if tostring(args[1]) == "TeleportDetect" then
        return
    elseif tostring(args[1]) == "CHECKER_1" then
        return
    elseif tostring(args[1]) == "CHECKER" then
        return
    elseif tostring(args[1]) == "GUI_CHECK" then
        return
    elseif tostring(args[1]) == "OneMoreTime" then
        return
    elseif tostring(args[1]) == "checkingSPEED" then
        return
    elseif tostring(args[1]) == "BANREMOTE" then
        return
    elseif tostring(args[1]) == "PERMAIDBAN" then
        return
    elseif tostring(args[1]) == "KICKREMOTE" then
        return
    elseif tostring(args[1]) == "BR_KICKPC" then
        return
    elseif tostring(args[1]) == "BR_KICKMOBILE" then
        return
    end
    return old(self, ...)
end)
end
--// Config System

--// Quick Execute
	local Console = Tub:AddConsole({
			["y"] = 100,
			["source"] = "Lua",
		})
		Console:Set("-- infinity.hook\nfor i = 1, 9 do \n    print(i)\nend")
		print(Console:Get())
		local HA = Tub:AddHorizontalAlignment()
		HA:AddButton("Execute", function()
			loadstring(Console:Get())()
		end)
		HA:AddButton("Clear", function()
			Console:Set("")
		end)
		
	end
	Tab:Show()
	library:FormatWindows()
end
